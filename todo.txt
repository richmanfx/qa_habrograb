
 - Вынести периоды опроса очередей в конфиг.

 - Определять формат файла изображения перед кодированием в базе64:
 	http://stackoverflow.com/questions/58510/using-net-how-can-you-find-the-mime-type-of-a-file-based-on-the-file-signature
 	-- можно: а еще вариант, если ты картинку получаешь http запросом, то посмотри хедер content-type для ответа

 - Отправлять результат в цикле в несколько попыток - алгоритм придумать с прогрессивным увеличение времени:
   Ядро не доступно, ждём сколько-то времени и шлём ещё раз, при неудаче увеличиваем время (адаптивно, 
   в два раза от предыдущего, например) и шлём ещё, и так 10 попыток к примеру.

 - проверка выходной очереди (хранилища) на заполненность при приёме новых заявок на /grab

 - Расчёт популярности статьи:
 	-- перемножать общий рейтинг, 
	   количество просмотров публикации и 
	   количество добавлений в избранное

 - Возможно: хранилище данных (не в объектах, а в базе SQLite) - смотреть на размер процесса!

 - ConnectionError в эмуляторе Ядра обрабатывать когда Грабер не запущен

==========
Готово:

 - Переделать сервер грабера с HTTPListener на TCPListener.

 - Юнит тест с негативным кейсом для метода определения языка статьи.

 - Юнит тест для метода определения языка статьи.

 - Из выходной очереди сразу не изымать результат, а брать для отправки и изымать после успешной отправки

 - readme.txt написать
 
 - картинку прикреплять к посту

 - картинку кодировать в base64

 - передатчик данных Ядру из хранилища

 - ресайз картинки делать до опеделённого размера файла:	=== Не будем пока резайзить - слать такое как на сайте лежит.
	-- http://www.askdev.ru/net-platform/2007/Ресайз-изображений-в-C-превьюшки/
	-- http://www.programmersforum.ru/showthread.php?t=156525
	-- http://www.cyberforum.ru/csharp-net/thread684947.html
	http://stackoverflow.com/questions/1922040/resize-an-image-c-sharp
	-- попробую ресайзить, смотреть размер, потом ресайзить ещё раз (возможно в другую сторону!), 
	   и так последовательно приблизиться с заданной точностью (или ещё и за заданное время, 
	   если долго получится) к требуемому размеру.

 - Грабером добавлять результаты грабинга в выходную очередь (хранилище)

 - Определитель языка статьи 

 - Опрос очереди и запуск грабберов - в отдельный поток

 - сделать автомат на Pytрhon для запуска по более 20-ти разных запросов одновременно

 - сделать команду для выхода (DELETE запрос)

 - Переделать потоки с делегатами - методы с аргуметами можно использовать

 - В лог добавить что сообщение из потока определённого

 - Вынести Грабер в отдельный файл

 - Сервер забирает по одной задаче из очереди 

 - Не заполняется Период поиска статей в GrabRequest
   -- убрал конструктор по умолчанию

 - Верификация GrabRequest от Ядра - Json.NET Schema (платная???) 
   -- ни к чему - исключение при десериализации обрабатываю.

 - Возможно проверять ID запроса на грабинг и уже существующие ID в очереди.

 - добавлять в очередь запросы на грабинг - проверить до заполнения очереди

 - Размер очереди вынести в конфиг-файл - 16 пока.

 - Очередь для заданий сделать

 - проверить имплементацию JSON объектов 
  	-- PingResponse				- V
   	-- GrabResponse.json 			- V
 	-- ErrorInfo.json	    		- V
 	-- ExceptionInfo.json			- V
 	-- GrabRequest.json			- V
 	-- Period.json				- V
 	-- GrabResultsRequest.json   		- V
 	-- GrabberInfo.json          		- V
 	-- AuthorInfo.json			- V
 	-- SourceInfo.json		     	- V
 	-- GrabResults.json			- V
 	-- PostInfo.json			- V
 	-- ProcessingInfo.json  		- V
 	-- GrabResultsResponse.json		- V 

 - Логотип Хабра размером до 100 кб. сделать.

 - Логотип Хабра закодировать в base64.

 - проверить типы внутри JSON объектов - сравнить с докой и
   сверить комментарии в коде JSON объектов с Пояснением в доке
 	-- GrabResponse.json 			- V
 	-- ErrorInfo.json	    		- V
 	-- ExceptionInfo.json			- V
 	-- GrabRequest.json			- V
 	-- Period.json				- V
 	-- GrabResultsRequest.json   		- V
 	-- GrabberInfo.json          		- V
 	-- AuthorInfo.json			- V
 	-- SourceInfo.json		     	- V
 	-- GrabResults.json			- V
 	-- PostInfo.json			- V
 	-- ProcessingInfo.json  		- V
 	-- GrabResultsResponse.json		- V
 	-- PingResponse				- V

 - Сделать все объекты на основе доки с JSON


==============================================================
Учесть:
Имена свойств пишутся с большой буквы
В конструкторе логичнее оставить только обязательные поля
и в принципе этого будет достаточно.
------------------
Правильно ли я понимаю, что такие условия  можно соблюсти с помощью именованных 
аргументов в конструкторах класса?

Если инициализация только таким конструтором, то норм.
Ещё можно извратиться и пулять Dictionary  конструктор или статический метод.
Ещё можно сделать отдельный метод типа IsValid(), который будет валидировать.
